editable: true
page:
  title: Backwalls
  description: The Backwalls is a rare event where a person mentions about the bus
    having a few hiccups or something isn't feeling right. Afterwards all players
    (assuming they are not in Frost's Den) are then teleported into the Backwalls.

  keywords: wiki, roblox bus simulator, roblox bus sim, roblox bus sim backwalls event

  tags: backwalls, event
  ignore: ignore

  header:
    description: |
      Category: [Events](events)\n
      Event Name: h[Backwalls]\n
      Event Runtime: h[Unknown]

    imageBanner: /assets/bussim/images/events/backwalls.webp

attributions: []
content: |
  ##[Info]
  The Backwalls is a rare event where a person mentions about the bus having a few hiccups or something isn't feeling right. 
  Afterwards all players <small>(assuming they are not in Frost's Den)</small> are then teleported into the Backwalls.
  \n\n
  You also would've been able to enter the Backwalls during Bus Simulator's 5th Birthday by eating the [Bus Birthday Cake](bus-birthday-cake) and immediately drinking [Cola](cola) right after. \n
  During this instance however, you'll keep both the Cake and Cola and have a chance to obtain the Cake permanently after the escape.
  \n\n 
  Likewise, you can achieve the same exact results during Bus Simulator's 6th Birthday by eating the [Bus Birthday Pie](bus-birthday-pie) and drinking [The Sludge](cafe-coffee-recipes) right after.\n 
  Similarly, you'll keep both the Pie and The Sludge and are guaranteed to obtain the pie permanently after escaping.
  \n\n
  The Backwalls is also not a pre-meditated area, generating new rooms and such everytime the event is rolled, assuming all players have already died or escaped it.
  \n\n
  The Backwalls is a dangerous place, containing entities and puddles that damage you over time. 
  There are however some benefits to it in such a place, as you can find [Pear](pear), [Almond Water](almond-water), a [Popcorn Machine](popcorn-bucket) and [Liquid Void](liquid-void) in areas.

  ##[Dangers of the Backwalls]
  "Apparently there's this tall shadow figure that chases you if you aren't careful, though. Hopefully they aren't too common." -"Tazer"

  In the Backwalls you will encounter a [tall shadow figure](entity) that patrols the area. When you meet eye contact with it long enough, it will chase after you until you either die or lose all attention from the entity. While you can avoid dying by being small, it prevents you from escaping attention and any jump will kill you.

  You may also encounter dark goo puddles around the Backwalls as well. upon touching it, goo will coat your entire character dealing significant damage until you are at 1 health left or if it expires. This also easily attracts the figures as well.

  There's also very rarely a .png in one of the areas, when in range it dashes at you at extraordinary speeds ragdolling you constantly. In this event you are likely to die easily from the other two dangers.

  ##[Benefits of the Backwalls]
  However though, not all is bad in the Backwalls, for there are three things that will help you both inside and outside of the event.
  \n\n
  [Almond Water](almond-water) can be found plenty throughout the area, when drunk it grants a significant speed boost and massively regenerates your health. It has two uses though.
  \n\n
  [Liquid Void](liquid-void) also can appear rarely as well, when drunk it makes the player temporarily invisible, rendering you undetectable for as long as the effect is active. However consuming it again for less than 20~ seconds after it has been used before will instantly kill the user.
  \n\n
  You may also find Popcorn Machines scattered very sparsely throughout the area. If you have both the [Kernels](kernels) and the [Bucket?](bucket), you'll be able to get the [Popcorn Bucket](popcorn-bucket), allowing you to eat and toss popcorn scrumptiously.
  \n\n
  The ones fully lit are completely safe, trying to use a weathered or partially lit one may have.. [severe consequences](daryl). Although can still be used the same.
  \n\n
  [Pear](pear) can also be found walking anywhere in the Backwalls and when talked to, you can have a conversation with him. You can also ask him to find the exit at a cost of 10 Passenger Reputation. He is also immortal in the Backwalls, not dying nor caring about the dangers that lie.
  \n\n
  Do note however, that if you enter via the Birthday Cake method, he will charge you 20 Passenger Reputation instead as a result of your unwise decisions.
  You may also find pitch black walls that emanate dark smoke, this may be helpful since when walked upon they teleport you to a random area. Useful for escaping entities or finding a way out.
  \n\n
  Another thing to note is that while you won't be able to know what events are happening while you are inside, you are completely immune to all events, this includes Flash Flood, Lava Floor, Acid Rain, Blizzard, and more. Although it's more unintentional and not recommended.
  \n\n
  The exit in the Backwalls is an open hole in the wall with a ladder and with a green light in the ceiling.

  ##[The Areas of the Backwalls]
  Occassionally, you may find areas that you don't expect to find in the Backwalls, namely locations that seem oddly familiar, yet not at the same time. You may even find a familiar face!.. A tired face that is.
  \n
  ###[The Ballpit]
  The Ballpit is a single room that contains a pit, with balls. Jumping into the pit will move any balls in contact and makes a sound. Despite this, it does create immense lag. It is recommended you avoid this room unless you have to hide from [Entities](entity) if you want to spare your low-end devices. 
  \n\n 
  Do note that hiding from Entities will not work if you aggrovate them while inside the pit. They can get in too.
  \n 
  ###[The Void Pits]
  The Void Pits is a large room that is mainly composed of holes arranged in a pattern. Each of them works the same as the void walls you encounter throughout your journey, teleporting you into a random spot once you go in. Beware though that some will kill you.
  \n 
  ###[Broken Elevator]
  The Broken Elevator is a small room that is about an elevator broken down within the walls of the Backwalls. It can't be interacted with. 
  \n 
  ###[The Maze]
  The Maze is a very large room that is composed of walls with varying heights, twists, turns and offsets, potentially confusing players and steering them off track. It is best to carry a [Marker](marker) for this scenario.
  \n
  ###[Fake Exit]
  The Fake Exits is a room similar of that to the actual exit, only that the top lights are White instead of gGeen, and the exit panel is Yellow instead of White. Entering this will teleport you to any spot similar to the Void Pits and the Void Walls.
  \n 
  ###[The Button]
  The Button is a rare room that spawns a simple button on a pedestal in the middle of the room with a sticky note attached saying "DO NOT PRESS". Pressing it will turn all of the lights red. Although, nothing seems to change apart from decreased Void Puddle visibility.
  \n\n 
  There's also a very rare chance that pressing it will remove all danger within the current generation.
  \n 
  ###[BloxDonalds]
  Main Article: [Backwalls Bloxdonalds](bloxdonalds-backwalls)
  \n\n
  The Bloxdonalds is an that appears as a large room, with [Red](red) managing the area again. You can order various items in exchange for [Passenger Reputation](reputation) and more. [Pear](pear) will also often arrive here, standing by. 
  \n
  ##[After the Event]
  Once you have escaped with [Almond Water](almond-water) or [Liquid Void](liquid-void), you have a 33% / 20% chance respectively in any server public or private, to permanently obtain them in your inventory outside of the event. You can also always get the [Popcorn Bucket](popcorn-bucket) if you carry it with you to the end.
  \n\n
  *(Note: the Popcorn Bucket is impossible to obtain in a VIP Server and likewise for the Almond and Liquid.)*
  \n\n
  You can also permanently obtain the [Bus Birthday Cake](bus-birthday-cake) by exiting the Backwalls successfully whilst still holding the Cake via the Birthday Cake method, allowing you to freely teleport to the Backwalls regardless if the event has been rolled. This has become unobtainable but used to be a 30% chance.

  ##[Trivia]
  - Although the event causes all players to teleport into the Backwalls, the event timer still ticks down immediately after. Which means that events will still occur right after the Backwalls has taken effect.
    - However, the Backwalls also has a bit of an infamous reputation for causing event timers to freeze, thus halting events entirely and dulling the entire server. Multiple fixes have been made and now it is uncertain if it'll happen again.
  - The Backwalls is obviously inspired by and referencing the Backrooms, which poses a similar theme.
  - You can only hold 1 type of item at a time (e.g. you can only have 1 Almond Water and 1 Liquid Void). Trying to pick up another makes nothing happen.
  - If Steven_Scripts (Not to be confused with the actual person, Steven himself) was still in the bus as soon as this event happened, you will find him doing the :cryingandshaking: emote in the walls of the Backwalls.
  - Since the Backwalls relies on RNG generation, the size of it is also randomized; when it's small you can find little to no entities but also little items.
    - Similarly, if the size is massive, you can expect many entities but also many items to use and escape with.
  - Originally, the chances for Almond Water & Liquid Void were believed to be 1/3rd, however after its increase the chances are now fully transparent.
    - The chances for Almond Water before were 10%, and Liquid Void was 4%.
  - The event is both technically the shortest and longest event in the game, as you enter the Backwalls within 12 seconds and ends; however, at the same time, in the Backwalls, it continues until the last person escapes or dies, which could possibly last a long time.
  - If the last person dies or escapes the Backwalls, the current generation of it will be completely deleted, and those who enter it afterwards will generate a new layout with restocked items.
  - If you ragdoll or find another way to prevent being teleported, you'll be able to see a part of the bridge no-clipping onto The Bus, this will also temporarily stop the bus for a second. It is also at the same time everyone else who is unfortunate enough gets sent to the Backwalls.

  ##[Technical Trivia]
  - Using [Edit](edit), the model for the entire Backwalls layout is called Backwalls_Map and contains multiple rooms, junctions, as well as an exit as separate models, each with their own layout and all being editable.
    - In one of the rooms / junctions, you may also find [Entities](entity), Furnitures, Puddles, and [Banana](banana) as their own models, presumably where they spawned.
      - Likewise, Almond Water and Liquid Void also spawn in rooms. Almond Water being named as AWatr_Obj, and Liquid Void as LVoid_Obj.
      - The Popcorn Machines also spawn here, with the normal being Popcorn Maker and the cursed being Cursed Popcorn Maker.
        - Within the popcorn machines come with a part named itcomeswithbutter, hinting that the [Popcorn Bucket](npcs) is already buttered.
        - If you attempt to use the Cursed Popcorn Maker, a new model will also appear named GhostEmployee or [Daryl](daryl).
      - [Pear](pear) however, spawns using his own model rather than being based on an existing room.
        - Pear and the Entities also inflict an effect when you get near them that is similar to the effect you get when you enter the Backwalls normally.
      - Each of the rooms may also have different colored parts that are hidden normally, and may suggest a purpose in each of the colors.
    - The map generates by branching itself from a "Start" model, with the base of it residing at x: -6000, y: 4500, and z: 1500.
  - If you enter the Backwalls using abnormal methods <small>(Teleporting using [Edit](editQQ) or with the help of an admin, or getting spotted by Pear or an Entity)</small>, you'll be able to keep all of your items, however will still be inflicted with the same effect one would have.

  !!GALLERY [/assets/bussim/images/events/backwalls.webp|/assets/bussim/images/events/backwalls2.webp|/assets/bussim/images/banners/backwalls/void-pits-backwalls.webp|/assets/bussim/images/banners/backwalls/ballpit-backwalls.webp|/assets/bussim/images/banners/backwalls/fake-exit-backwalls.webp|/assets/bussim/images/banners/backwalls/the-red-backwalls.webp]
